Verificar novamente a geração de call graph
------------------------------------------
Prioridade 0: resolver o alto número de arquivos descartados
Prioridade 1: adotar a minha metodologia para EH
Prioridade 1: Rodar novamente a análise com a nova versão do JSS e verificar o resultado
Prioridade 1: zerar o relatório da sonarlint
Prioridade 2: Revisar todo o código, linha a linha, removendo ou movendo classes para seus devidos lugares.
	Decidir como chamar os casos de "get" em que há processamento.
Prioridade 2: Algumas classes android não são incluidas nas dependencias. As classes são dos projetos 'support' do android (até agora, só v4). Verificar se os existem projetos android q usam classes support e q não tem problemas. Estou pensando que esse problema é de configuração do projeto, e não do EHMetrics.
Prioridade 2: aprender a usar a api do github e implementar minha própria busca.
	Como pegar mais que 1000 resultados
Prioridade 2: a classe Repository deve ter um método para baixar o repositório. Tipo Repository#downloadTo ( File targetFile, boolean unzip, String projectRootName ).
Prioridade 2: investigar o alto número de Unsolved types.
Prioridade 3: publicar ferramenta que busca, baixa e descompacta para o LETS
Prioridade 3: Um TypeVisitor para pegar os tipos.
Prioridade 4: Verificar padrões de autocomplete do Eclipse, NetBeans e IntelliJ
	Implementar verificação de padrões
		OK Eclipse
		OK IntelliJ
		OK AndroidStudio
		NetBeans


Nota: as classes de modelo que vão ser populadas pelo GitHub precisam ter os atributos iguais as tags do JSON (ver documentação), mas não precisam de getters e setters. Então a recomendação é trocar o nome dos getters para criar uma API mais amigável.
Nota: o EHExtractor não suporta arquivos java sem pacote. A ferramenta descarta esses arquivos java.
Nota: o JavaParser não resolve anonymous inner nested classes. Quando ocorrem em um arquivo, o arquivo é removido da análise.
Nota: É preciso instalar o maven, gradle, android studio, etc, a depender do que o sistema analisado precisa.
Nota: É considerado que qualquer dependencia em jars é externa ao sistema (library).
